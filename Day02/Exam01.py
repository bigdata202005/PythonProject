# Q1
# 홍길동 씨의 과목별 점수는 다음과 같다. 홍길동 씨의 평균 점수를 구해 보자.
#
# 과목	점수
# 국어	80
# 영어	75
# 수학	55

name = "홍길동"
kor, eng, mat = 80, 75, 55
print(name)
print(kor, eng, mat)
avg = (kor + eng + mat) / 3
print(name + "님의 평균 : " + str(avg))
print("{}님의 평균 : {}".format(name, avg))

# ------------------------------------------------------------------------------
# 자연수 13이 홀수인지 짝수인지 판별할 수 있는 방법에 대해 말해 보자.
num = 13
print("{}은 ".format(num), end="")
print("짝수" if num % 2 == 0 else "홀수", end="")
print("입니다.")
print("{}은 {}입니다.".format(num, num % 2 == 0 and '짝수' or '홀수'))
num = 14
print("{}은 ".format(num), end="")
print("짝수" if num % 2 == 0 else "홀수", end="")
print("입니다.")
print("{}은 {}입니다.".format(num, num % 2 == 0 and '짝수' or '홀수'))

# ------------------------------------------------------------------------------
# 홍길동 씨의 주민등록번호는 881120-1068234이다.
# 홍길동 씨의 주민등록번호를 연월일(YYYYMMDD) 부분과 그 뒤의 숫자 부분으로 나누어 출력해 보자.
# ※ 문자열 슬라이싱 기법을 사용해 보자.
no = "881120-1068234"
print(no[0:6])
print(no[:6])
print(no[7:14])
print(no[7:])
# ------------------------------------------------------------------------------
# 주민등록번호 뒷자리의 맨 첫 번째 숫자는 성별을 나타낸다.
# 주민등록번호에서 성별을 나타내는 숫자를 출력해 보자.
# ※ 문자열 인덱싱을 사용해 보자.
pin = "881120-1068234"
print(pin[7])
# ------------------------------------------------------------------------------
# 다음과 같은 문자열 a:b:c:d가 있다. 문자열의 replace 함수를 사용하여 a#b#c#d로 바꿔서 출력해 보자.
a = "a:b:c:d"
print(a)
a = a.replace(":", "#")
print(a)
# ------------------------------------------------------------------------------
# [1, 3, 5, 4, 2] 리스트를 [5, 4, 3, 2, 1]로 만들어 보자.
# ※ 리스트의 내장 함수를 사용해 보자.
list1 = [1, 3, 5, 4, 2]
list1.sort()
list1.reverse()
print(list1)

# ------------------------------------------------------------------------------
# ['Life', 'is', 'too', 'short'] 리스트를 Life is too short 문자열로 만들어 출력해 보자.
# ※ 문자열의 join 함수를 사용하면 리스트를 문자열로 쉽게 만들 수 있다.
list2 = ['Life', 'is', 'too', 'short']
join_str = " ".join(list2)
print(join_str)

# ------------------------------------------------------------------------------
# (1,2,3) 튜플에 값 4를 추가하여 (1,2,3,4)를 만들어 출력해 보자.
# ※ 더하기(+)를 사용해 보자.
t = (1, 2, 3)
# t = t + (4)  # TypeError: can only concatenate tuple (not "int") to tuple
t = t + (4,)
print(t)

# ------------------------------------------------------------------------------
# 다음과 같은 딕셔너리 a가 있다.
#
# >>> a = dict()
# >>> a
# {}
# 다음 중 오류가 발생하는 경우를 고르고, 그 이유를 설명해 보자.
#
# a['name'] = 'python'
# a[('a',)] = 'python'
# a[[1]] = 'python'
# a[250] = 'python'

a = dict()
print(a)
a['name'] = 'python'
a[('a',)] = 'python'  # 튜플은 가능하다!!!
# a[[1]] = 'python'  # TypeError: unhashable type: 'list' 리스트는 키가 될 수 없다.
a[250] = 'python'
print(a)

# ------------------------------------------------------------------------------
# 딕셔너리 a에서 'B'에 해당되는 값을 추출해 보자.
# >>> a = {'A':90, 'B':80, 'C':70}
# ※ 딕셔너리의 pop 함수를 사용해 보자.
a = {'A': 90, 'B': 80, 'C': 70}
print(a)
print(a.pop('B'))
print(a)

# ------------------------------------------------------------------------------
# a 리스트에서 중복 숫자를 제거해 보자.
# ※ 집합 자료형의 요솟값이 중복될 수 없다는 특징을 사용해 보자.
a = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5]
print(a)
a = set(a)
print(a)
print(type(a))
a = list(a)
print(a)
print(type(a))
print()

a = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5]
a = list(set(a))
print(a)
print(type(a))

# ------------------------------------------------------------------------------
# 파이썬은 다음처럼 동일한 값에 여러 개의 변수를 선언할 수 있다.
# 다음과 같이 a, b 변수를 선언한 후 a의 두 번째 요솟값을 변경하면 b 값은 어떻게 될까?
# 그리고 이런 결과가 오는 이유에 대해 설명해 보자.
#
# >>> a = b = [1, 2, 3]
# >>> a[1] = 4
# >>> print(b)
a = b = [1, 2, 3]
a[1] = 4
print(b)
print(a is b and '동일객체' or '다른객체')
print(id(a))
print(id(b))


